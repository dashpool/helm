{{ if .Values.components.dashboard }}

kind: Service
apiVersion: v1
metadata:
  labels:
    k8s-app: {{ .Values.system.appName }}-dashboard
  name: {{ .Values.namespaces.system}}
  namespace:  {{ .Values.namespaces.system}}
spec:
  ports:
    - port: 7777
      targetPort: 8443
  selector:
    k8s-app: {{ .Values.system.appName }}-dashboard
  type: LoadBalancer
  sessionAffinity: None
  externalTrafficPolicy: Cluster
  ipFamilies:
    - IPv4
  ipFamilyPolicy: SingleStack
  allocateLoadBalancerNodePorts: true
  internalTrafficPolicy: Cluster
status:
  loadBalancer:
    ingress:
      - hostname: {{ .Values.server.host }}


---

apiVersion: v1
kind: Secret
metadata:
  labels:
    k8s-app: {{ .Values.system.appName }}-dashboard
  name: {{ .Values.namespaces.system}}-certs
  namespace:  {{ .Values.namespaces.system}}
type: Opaque

---

apiVersion: v1
kind: Secret
metadata:
  labels:
    k8s-app: {{ .Values.system.appName }}-dashboard
  name: kubernetes-dashboard-csrf
  namespace:  {{ .Values.namespaces.system}}
type: Opaque
data:
  csrf: ""

---

apiVersion: v1
kind: Secret
metadata:
  labels:
    k8s-app: {{ .Values.system.appName }}-dashboard
  name: {{ .Values.namespaces.system}}-key-holder
  namespace:  {{ .Values.namespaces.system}}
type: Opaque

---

kind: ConfigMap
apiVersion: v1
metadata:
  labels:
    k8s-app: {{ .Values.system.appName }}-dashboard
  name: {{ .Values.namespaces.system}}-settings
  namespace:  {{ .Values.namespaces.system}}

---

kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  # labels:
  #   k8s-app: {{ .Values.system.appName }}-dashboard
  name: {{ .Values.namespaces.system}}
  namespace:  {{ .Values.namespaces.system}}
rules:
  # Allow Dashboard to get, update and delete Dashboard exclusive secrets.
  - apiGroups: [""]
    resources: ["secrets"]
    resourceNames: ["{{ .Values.namespaces.system}}-key-holder", "{{ .Values.namespaces.system}}-certs", "{{ .Values.namespaces.system}}-csrf"]
    verbs: ["get", "update", "delete"]
    # Allow Dashboard to get and update '{{ .Values.namespaces.system}}-settings' config map.
  - apiGroups: [""]
    resources: ["configmaps"]
    resourceNames: ["{{ .Values.namespaces.system}}-settings"]
    verbs: ["get", "update"]
    # Allow Dashboard to get metrics.
  - apiGroups: [""]
    resources: ["services"]
    resourceNames: ["heapster", "dashboard-metrics-scraper"]
    verbs: ["proxy"]
  - apiGroups: [""]
    resources: ["services/proxy"]
    resourceNames: ["heapster", "http:heapster:", "https:heapster:", "dashboard-metrics-scraper", "http:dashboard-metrics-scraper"]
    verbs: ["get"]
  # Allow Metrics Scraper to get metrics from the Metrics server
  - apiGroups: ["metrics.k8s.io"]
    resources: ["pods", "nodes"]
    verbs: ["get", "list", "watch"]
---

# kind: ClusterRole
# apiVersion: rbac.authorization.k8s.io/v1
# metadata:
#   labels:
#     k8s-app: kubernetes-dashboard
#   name: {{ .Values.namespaces.system}}
# rules:
#   # Allow Metrics Scraper to get metrics from the Metrics server
#   - apiGroups: ["metrics.k8s.io"]
#     resources: ["pods", "nodes"]
#     verbs: ["get", "list", "watch"]

# ---

# apiVersion: rbac.authorization.k8s.io/v1
# kind: RoleBinding
# metadata:
#   labels:
#     k8s-app: kubernetes-dashboard
#   name: {{ .Values.namespaces.system}}
#   namespace:  {{ .Values.namespaces.system}}
# roleRef:
#   apiGroup: rbac.authorization.k8s.io
#   kind: Role
#   name: {{ .Values.namespaces.system}}
# subjects:
#   - kind: ServiceAccount
#     name: {{ .Values.namespaces.system}}
#     namespace:  {{ .Values.namespaces.system}}

# ---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: {{ .Values.namespaces.system}}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: {{ .Values.namespaces.system}}
subjects:
  - kind: ServiceAccount
    name: {{ .Values.namespaces.system}}
    namespace:  {{ .Values.namespaces.system}}

---


kind: Deployment
apiVersion: apps/v1
metadata:
  labels:
    k8s-app: {{ .Values.system.appName }}-dashboard
  name: kubernetes-dashboard
  namespace:  {{ .Values.namespaces.system}}
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      k8s-app: {{ .Values.system.appName }}-dashboard
  template:
    metadata:
      labels:
        k8s-app: {{ .Values.system.appName }}-dashboard
    spec:
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      containers:
        - name: {{ .Values.namespaces.system}}
          image: kubernetesui/dashboard:v2.5.0
          imagePullPolicy: Always
          ports:
            - containerPort: 8443
              protocol: TCP
          volumeMounts:
          args:
            - --namespace={{ .Values.namespaces.system}}
            - --tls-cert-file=cer.pem
            - --tls-key-file=key.pem
            - --auto-generate-certificates
            # Uncomment the following line to manually specify Kubernetes API server Host
            # If not specified, Dashboard will attempt to auto discover the API server and connect
            # to it. Uncomment only if the default does not work.
            # - --apiserver-host=http://my-address:port
          volumeMounts:
            - mountPath: "/certs/cer.pem"
              name: dashpool-cfg
              subPath: crt
            - mountPath: "/certs/key.pem"
              name: dashpool-cfg
              subPath: key
              # Create on-disk volume to store exec logs
            - mountPath: /tmp
              name: tmp-volume
          livenessProbe:
            httpGet:
              scheme: HTTPS
              path: /
              port: 8443
            initialDelaySeconds: 30
            timeoutSeconds: 30
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 1001
            runAsGroup: 2001
      volumes:
        - name: {{ .Values.namespaces.system}}-certs
          secret:
            secretName: {{ .Values.namespaces.system}}-certs
        - name: tmp-volume
          emptyDir: {}
        - name: dashpool-cfg
          secret:
            secretName: dashpool-cfg
      serviceAccountName: {{ .Values.system.admin }}
      nodeSelector:
        "kubernetes.io/os": linux
      # Comment the following tolerations if Dashboard must not be deployed on master
      tolerations:
        - key: node-role.kubernetes.io/master
          effect: NoSchedule


---

kind: Service
apiVersion: v1
metadata:
  labels:
    k8s-app: {{ .Values.system.appName }}-dashboard-metrics-scraper
  name: dashboard-metrics-scraper
  namespace:  {{ .Values.namespaces.system}}
spec:
  ports:
    - port: 8000
      targetPort: 8000
  selector:
    k8s-app: {{ .Values.system.appName }}-dashboard-metrics-scraper

---

kind: Deployment
apiVersion: apps/v1
metadata:
  labels:
    k8s-app: {{ .Values.system.appName }}-dashboard-metrics-scraper
  name: dashboard-metrics-scraper
  namespace:  {{ .Values.namespaces.system}}
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      k8s-app: {{ .Values.system.appName }}-dashboard-metrics-scraper
  template:
    metadata:
      labels:
        k8s-app: {{ .Values.system.appName }}-dashboard-metrics-scraper
    spec:
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      containers:
        - name: dashboard-metrics-scraper
          image: kubernetesui/metrics-scraper:v1.0.7
          ports:
            - containerPort: 8000
              protocol: TCP
          livenessProbe:
            httpGet:
              scheme: HTTP
              path: /
              port: 8000
            initialDelaySeconds: 30
            timeoutSeconds: 30
          volumeMounts:
          - mountPath: /tmp
            name: tmp-volume
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 1001
            runAsGroup: 2001
      serviceAccountName: {{ .Values.system.admin }}
      nodeSelector:
        "kubernetes.io/os": linux
      # Comment the following tolerations if Dashboard must not be deployed on master
      tolerations:
        - key: node-role.kubernetes.io/master
          effect: NoSchedule
      volumes:
        - name: tmp-volume
          emptyDir: {}

{{ end }}