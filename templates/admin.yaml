
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ .Values.system.admin }}
  namespace: {{ .Values.namespaces.system}}

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: {{ .Values.system.admin }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: {{ .Values.system.admin }}
  namespace: {{ .Values.namespaces.system}}

---


apiVersion: v1
kind: Secret
metadata:
  name: admin-token
  annotations:
    kubernetes.io/service-account.name: {{ .Values.system.admin }}
  namespace: {{ .Values.namespaces.system}}
type: kubernetes.io/service-account-token

---



apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ .Values.namespaces.system }}
  namespace: {{ .Values.namespaces.system }}


--- 

apiVersion: v1
kind: ConfigMap
metadata:
  name: admin-configmap
  namespace: {{ .Values.namespaces.system }}
data:
  admin.cfg: |
    [namespaces]
{{- range $key, $value := .Values.namespaces }}
    {{ $key }} = {{ $value }}
{{- end }}   
    [ports]
{{- range $key, $value := .Values.server.ports }}
    {{ $key }} = {{ $value }}
{{- end }}
---


apiVersion: apps/v1
kind: Deployment
metadata:
  name: admin
  namespace: {{ .Values.namespaces.system }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: admin
  template:
    metadata:
      labels:
        app: admin
    spec:
      containers:

      - name: admin
        image: dashpool/admin:{{ .Values.components.version }}
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 5000
        volumeMounts:
            - name: config-volume
              mountPath: /usr/src/admin.cfg
              subPath: admin.cfg
            # - mountPath: /usr/src/kube.cfg
            #   name: dashpool-cfg
            #   subPath: kubernetes
        resources:
          requests:
            cpu: 10m
            memory: 150Mi
        env:
        - name: MONGODB_URI
          value: mongodb://{{ .Values.system.mongohost }}
        - name: MONGODB_DATABASE
          value: {{ .Values.system.dashpooldb }}
        - name: SHOW_MONGO
          value: "{{ .Values.components.mongoexpress }}"
        - name: SHOW_TRAEFIK
          value: "{{ .Values.components.ingress }}"
        - name: SHOW_KDASHBOARD
          value: "{{ .Values.components.dashboard }}"
        - name: SUPER_ADMINS
          value: {{ .Values.auth.superAdmins }}
        - name: MAIL_HOST
          value: {{ .Values.mail.host }}
        - name: MAIL_PORT
          value: "{{ .Values.mail.port }}"
        - name: MAIL_FROM
          value: {{ .Values.mail.from }}

      volumes:
      - name: config-volume
        configMap:
          name: admin-configmap
      - name: dashpool-cfg
        secret:
          secretName: dashpool-cfg
      serviceAccountName: {{ .Values.system.admin }}
---

apiVersion: v1
kind: Service
metadata:
  name: admin-landing-service
  namespace: {{ .Values.namespaces.system }}
spec:
  selector:
    app: admin
  ports:
    - protocol: TCP
      port: 80
      targetPort: 5000
  type: NodePort



---



apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: admin-landing-ingress
  namespace: {{ .Values.namespaces.system }}
  annotations:
    traefik.ingress.kubernetes.io/rule-type: "PathPrefixStrip"
    traefik.ingress.kubernetes.io/router.tls: "false"
    traefik.ingress.kubernetes.io/router.entrypoints: admin
    traefik.ingress.kubernetes.io/router.middlewares: {{ .Values.namespaces.system }}-redirect-https@kubernetescrd
spec:
  rules:
    - host: {{ .Values.server.host }}
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: admin-landing-service
                port:
                  number: 80

---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: admin-landing-secure-ingress
  namespace: {{ .Values.namespaces.system }}
  annotations:
    traefik.ingress.kubernetes.io/rule-type: "PathPrefixStrip"
    traefik.ingress.kubernetes.io/router.tls: "true"
    traefik.ingress.kubernetes.io/router.entrypoints: admin
    traefik.ingress.kubernetes.io/router.middlewares: {{ .Values.namespaces.system }}-admin-auth@kubernetescrd,{{ .Values.namespaces.system }}-dash@kubernetescrd 
spec:
  rules:
    - host: {{ .Values.server.host }}
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: admin-landing-service
                port:
                  number: 80


---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: admin-traefik-secure-ingress
  namespace: {{ .Values.namespaces.ingress }}
  annotations:
    traefik.ingress.kubernetes.io/router.tls: "true"
    traefik.ingress.kubernetes.io/router.entrypoints: admin
    traefik.ingress.kubernetes.io/router.middlewares: {{ .Values.namespaces.system }}-admin-auth@kubernetescrd
spec:
  rules:
    - host: {{ .Values.server.host }}
      http:
        paths:
          - path: /dashboard
            pathType: Prefix
            backend:
              service:
                name: traefik-internal-service
                port:
                  number: 8080

---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: admin-traefik-api-secure-ingress
  namespace: {{ .Values.namespaces.ingress }}
  annotations:
    traefik.ingress.kubernetes.io/router.tls: "true"
    traefik.ingress.kubernetes.io/router.entrypoints: admin
    traefik.ingress.kubernetes.io/router.middlewares: {{ .Values.namespaces.system }}-admin-auth@kubernetescrd
spec:
  rules:
    - host: {{ .Values.server.host }}
      http:
        paths:
          - path: /api
            pathType: Prefix
            backend:
              service:
                name: traefik-internal-service
                port:
                  number: 8080


---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: admin-k9s-dashboard-secure-ingress
  namespace: {{ .Values.namespaces.system }}
  annotations:
    traefik.ingress.kubernetes.io/router.tls: "true"
    traefik.ingress.kubernetes.io/router.entrypoints: admin
    traefik.ingress.kubernetes.io/router.middlewares: {{ .Values.namespaces.system }}-admin-auth@kubernetescrd,{{ .Values.namespaces.system }}-dashboard-strip@kubernetescrd
    traefik.http.services.portainer.loadbalancer.server.scheme: "https"
spec:
  rules:
    - host: {{ .Values.server.host }}
      http:
        paths:
          - path: /kdashboard
            pathType: Prefix
            backend:
              service:
                name: kubernetes-dashboard
                port:
                  number: 9090                  

---

apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: dashboard-strip
  namespace: {{ .Values.namespaces.system }}  
spec:
  stripPrefix:
    prefixes:
      - /kdashboard


---



{{ if .Values.crons.adminUpdate }}
# cronjob to update the admin dashboard
apiVersion: batch/v1
kind: CronJob
metadata:
  name: job-admin-update
  namespace: {{ .Values.namespaces.system }}
spec:
  schedule: {{ .Values.crons.adminUpdate }}
  jobTemplate:
    spec:
      ttlSecondsAfterFinished: 600
      template:
        spec:
          containers:
          - name: admin
            
            image: dashpool/admin:{{ .Values.components.version }}
            imagePullPolicy: IfNotPresent
            command: ["/bin/sh"]
            args: ["-c", "python3 /usr/src/app/cron.py"]
            volumeMounts:
            - name: config-volume
              mountPath: /usr/src/admin.cfg
              subPath: admin.cfg
            env:
            - name: MONGODB_URI
              value: mongodb://{{ .Values.system.mongohost }}
            - name: MONGODB_DATABASE
              value: {{ .Values.system.dashpooldb }}
            - name: SUPER_ADMINS
              value: {{ .Values.auth.superAdmins }}
            - name: MAIL_HOST
              value: {{ .Values.mail.host }}
            - name: MAIL_PORT
              value: "{{ .Values.mail.port }}"
            - name: MAIL_FROM
              value: {{ .Values.mail.from }}              
          restartPolicy: OnFailure
          volumes:
          - name: config-volume
            configMap:
              name: admin-configmap
          - name: dashpool-cfg
            secret:
              secretName: dashpool-cfg  
          serviceAccountName: {{ .Values.system.admin }}



---
{{ end }}


{{ if .Values.crons.dbClean }}

# cronjob to update the admin dashboard
apiVersion: batch/v1
kind: CronJob
metadata:
  name: job-db-clean
  namespace: {{ .Values.namespaces.system }}
spec:
  schedule: {{ .Values.crons.dbClean }}
  jobTemplate:
    spec:
      ttlSecondsAfterFinished: 600
      template:
        spec:
          containers:
          - name: admin
            
            image: dashpool/admin:{{ .Values.components.version }}
            imagePullPolicy: IfNotPresent
            command: ["/bin/sh"]
            args: ["-c", "python3 /usr/src/app/cron.py"]
            volumeMounts:
            - name: config-volume
              mountPath: /usr/src/admin.cfg
              subPath: admin.cfg
            env:
            - name: DASHPOOL_DB_CLEAN
              value: "true"
            - name: MONGODB_URI
              value: mongodb://{{ .Values.system.mongohost }}
            - name: MONGODB_DATABASE
              value: {{ .Values.system.dashpooldb }}      

          restartPolicy: OnFailure
          volumes:
          - name: config-volume
            configMap:
              name: admin-configmap
          - name: dashpool-cfg
            secret:
              secretName: dashpool-cfg  
          serviceAccountName: {{ .Values.system.admin }}
     

---
{{  end }}



{{ if .Values.system.mongoexpress }}

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: admin-traefik-secure-ingress
  namespace: {{ .Values.namespaces.system }}
  annotations:
    traefik.ingress.kubernetes.io/router.tls: "true"
    traefik.ingress.kubernetes.io/router.entrypoints: admin
    traefik.ingress.kubernetes.io/router.middlewares: {{ .Values.namespaces.system }}-admin-auth@kubernetescrd, {{ .Values.namespaces.system }}-dash@kubernetescrd
spec:
  rules:
    - host: {{ .Values.server.host }}
      http:
        paths:
          - path: /mongo
            pathType: Prefix
            backend:
              service:
                name: mongo-express
                port:
                  number: 8081


{{ end }}
