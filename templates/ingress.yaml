{{ if .Values.components.ingress }}


apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: traefik-ingress-controller

rules:
  - apiGroups: [""]
    resources: [services, endpoints, secrets]
    verbs: [get, list, watch]
  - apiGroups: [extensions, networking.k8s.io]
    resources: [ingresses, ingressclasses]
    verbs: [get, list, watch]
  - apiGroups: [extensions, networking.k8s.io]
    resources: [ingresses/status]
    verbs: [update]
  - apiGroups: [traefik.io, traefik.containo.us]
    resources: [middlewares, middlewaretcps, ingressroutes, traefikservices, ingressroutetcps, ingressrouteudps, tlsoptions, tlsstores, serverstransports]
    verbs: [get, list, watch]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: traefik-ingress-controller

roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: traefik-ingress-controller
subjects:
  - kind: ServiceAccount
    name: traefik-ingress-controller
    namespace: {{ .Values.namespaces.ingress }}


---
apiVersion: v1
kind: ConfigMap
metadata:
  name: traefik-config
  namespace: {{ .Values.namespaces.ingress }}
data:
  traefik.yaml: |

    providers:
      kubernetesCRD:
        allowCrossNamespace: true
      kubernetesIngress:
        ingressClass: public

    log:
      level: DEBUG


    entryPoints:
{{- range $key, $value := .Values.server.ports }}
        {{ $key }}:
          address: ":{{ $value }}"
{{- end }}           

    api:
      dashboard: true
      insecure: true

    tls:
      stores:
        default:
          defaultCertificate:
            secretName:
              dashpool-cfg

    experimental:
      plugins:
        stripcookie:
          moduleName: "github.com/nilskohrs/stripcookie"
          version: "v0.1.0"

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: traefik-ingress-controller
  namespace: {{ .Values.namespaces.ingress }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: traefik
  template:
    metadata:
      labels:
        app: traefik
    spec:
      serviceAccountName: traefik-ingress-controller
      containers:
        - name: traefik
          image: traefik:v2.10
          args:
            - "--configfile=/config/traefik.yaml"
          ports:
{{- range $key, $value := .Values.server.ports }}
          - name: {{ $key }}
            containerPort: {{ $value }}
{{- end }}
             

          volumeMounts:
            - name: config
              mountPath: /config
            # - mountPath: "/cert/dashpool.cert"
            #   name: dashpool-cfg
            #   subPath: crt
            # - mountPath: "/cert/dashpool.key"
            #   name: dashpool-cfg
            #   subPath: key                  
      volumes:
        - name: config
          configMap:
            name: traefik-config
        # - name: dashpool-cfg
        #   secret:
        #     secretName: dashpool-cfg       


---


apiVersion: v1
kind: Secret
metadata:
  name: default-certificate
  namespace:  {{ .Values.namespaces.ingress}}

type: Opaque
data:
  tls.crt: {{ .Values.system.crt}}
  tls.key: {{ .Values.system.key}}



---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: traefik-ingress-controller
  namespace: {{ .Values.namespaces.ingress }}

---


apiVersion: v1
kind: Service
metadata:
  name: traefik-service
  namespace: {{ .Values.namespaces.ingress }}
spec:
  selector:
    app: traefik
  ports:
{{- range $key, $value := .Values.server.ports }}
    - name: {{ $key }}
      port: {{ $value }}
      targetPort: {{ $value }}
{{- end }}

    # - name: dashboard
    #   port: 8080
    #   targetPort: 8080
  type: LoadBalancer

---

apiVersion: v1
kind: Service
metadata:
  name: traefik-internal-service
  namespace: {{ .Values.namespaces.ingress }}
spec:
  selector:
    app: traefik
  ports:
    - name: dashboard
      port: 8080
      targetPort: 8080
  type: NodePort


---
apiVersion: networking.k8s.io/v1
kind: IngressClass
metadata:
  labels:
    app.kubernetes.io/component: controller
  name: public
  namespace: {{ .Values.namespaces.ingress }}
  annotations:
    ingressclass.kubernetes.io/is-default-class: "true"
spec:
  controller: traefik.io/ingress-controller    


---



apiVersion: traefik.io/v1alpha1
kind: TLSStore
metadata:
  name: default
  namespace: {{ .Values.namespaces.ingress }}

spec:
  defaultCertificate:
    secretName: default-certificate    

---

apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: redirect-https
  namespace: {{ .Values.namespaces.system }}
spec:
  redirectScheme:
    scheme: https
    permanent: true

---


apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: auth
  namespace: {{ .Values.namespaces.system }}
spec:
  forwardAuth:
    address: http://oauth2-proxy.{{ .Values.namespaces.system }}:4180/oauth2/auth?{{ .Values.auth.userAuth }}
    trustForwardHeader: true
    authResponseHeaders:
      - "X-Forwarded-User"
    

---


apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: admin-auth
  namespace: {{ .Values.namespaces.system }}
spec:
  forwardAuth:
    address: http://oauth2-proxy.{{ .Values.namespaces.system }}:4180/oauth2/auth?{{ .Values.auth.adminAuth }}
    trustForwardHeader: true
    authResponseHeaders:
      - "X-Forwarded-User"




---

apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: strip-auth-cookie
  namespace: {{ .Values.namespaces.system }}
spec:
  plugin:
    stripcookie:
      cookies:
      - _oauth2_proxy_0
      - _oauth2_proxy_1
      - _oauth2_proxy_2
      - _oauth2_proxy_3
      - _oauth2_proxy_4
      - _oauth2_proxy_5


---


{{ end }}